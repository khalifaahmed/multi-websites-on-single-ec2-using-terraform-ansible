- name: Configure httpd server
  hosts: all
  become: yes
  tasks: 
  - name: install packages 
    vars:
      ansible_python_interpreter: /usr/bin/python
    yum:
      name:
      - python
      - python3
      - pip
      - httpd
      - vim
      - net-tools
      - mysql-server
      - mysql
      - bash-completion.noarch      
      - firewalld
      - zip
      update_cache: yes
      state: present
  - name: making some alias
    ansible.builtin.blockinfile:
      path: /etc/bashrc
      block: |
        alias c=clear
        alias k=kubectl   
        alias la='ls -alhF'
  - name: Set a hostname
    ansible.builtin.hostname:
      name: multi-websites             
  - name: start & enable httpd
    systemd: 
      name: httpd
      state: started
      enabled: true   
  - name: Install the php remote repo
    ansible.builtin.dnf:
      name: 'https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm'
      state: present
      disable_gpg_check: true
  # - name: Install the nginx rpm from a remote repo
  #   ansible.builtin.dnf:
  #     name: 'https://rpms.remirepo.net/enterprise/remi-release-8.rpm'
  #     state: present 
  #     disable_gpg_check: true
  - name : enable dnf module enable php
    command: dnf module -y enable php
  - name: Install the latest version of Apache from the testing repo
    ansible.builtin.dnf:
      name:
      - php 
      - php-cli 
      - php-common
      - php-mysqlnd
  - name: Copy html files
    copy:
      src: /home/ahmed/Desktop/terraform/multi-websites-on-single-ec2-using-terraform-ansible/redhat/html_files/
      dest: /var/www/html/
  - name: Copy html_ali files
    copy:
      src: /home/ahmed/Desktop/terraform/multi-websites-on-single-ec2-using-terraform-ansible/redhat/html_ali/
      dest: /var/www/clinic
  - name: Create /var/www/web2 directory if it does not exist
    ansible.builtin.file:
      path: /var/www/web2
      state: directory      
  - name: configure web 2 in httpd.conf 
    ansible.builtin.blockinfile:
      path: /var/www/web2/index.html
      block: |
        hellooooooooo from web2 man
      create: true      
  - name: Put SELinux in permissive mode, logging actions that would be blocked.
    ansible.posix.selinux:
      policy: targeted
      state: permissive
  - name: make http work on port 82 in the conf file 
    lineinfile: 
      path: /etc/httpd/conf/httpd.conf
      regexp: '^Listen 80'
      line: Listen *:80      
  - name: configure clinic on httpd.conf
    ansible.builtin.blockinfile:
      path: /etc/httpd/conf.d/01-clinic.conf
      block: |
        <Directory "/var/www/clinic">
          AllowOverride None
          # Allow open access:
          Require all granted
        </Directory>
        <VirtualHost *:80>   # OR  <VirtualHost 10.0.1.184:80>
          ServerAdmin adfa@fadf.com
          DocumentRoot "/var/www/clinic"
          ServerName ec2-3-138-87-48.us-east-2.compute.amazonaws.com
          ErrorLog "/var/log/httpd/clinic-error_log"
          TransferLog "/var/log/httpd/clinic-access_log"
        </VirtualHost>
      create: true        
  - name: configure web 2 in httpd.conf 
    ansible.builtin.blockinfile:
      path: /etc/httpd/conf.d/02-web2.conf
      block: |
        <Directory "/var/www/web2">
          AllowOverride None
          # Allow open access:
          Require all granted
        </Directory>
        <VirtualHost *:80>   # OR  <VirtualHost 10.0.1.150:80>
          ServerAdmin web2@fadfa.com
          DocumentRoot "/var/www/web2"
          ServerName  ec2-3-22-139-216.us-east-2.compute.amazonaws.com
          ErrorLog "/var/log/httpd/web2-error_log"
          TransferLog "/var/log/httpd/web2-access_log"
        </VirtualHost>
      create: true        

  - name: start & enable mysqld
    systemd: 
      name: mysqld
      state: started
      enabled: true      
  - name: Install docker mysql module
    vars:
      ansible_python_interpreter: /usr/bin/python
    pip: 
      name: 
      - mysql-connector 
      - PyMySQL   
  # - name: Install docker python module
  #   vars:
  #     ansible_python_interpreter: /usr/bin/python3
  #   pip: 
  #     name: 
  #     - mysql-connector          
  - name: Create database user with password and all database privileges and 'WITH GRANT OPTION'
    community.mysql.mysql_user:
      name: iti
      password: iti
      priv: '*.*:ALL,GRANT'
      state: present
      host: '%'
      # host_all: true   #not allowed here mainly
      # session_vars:
      #   wsrep_on: off
  - name: Removes all anonymous user accounts
    community.mysql.mysql_user:
      name: 'iti'
      host_all: true
      state: present      
  - name: Reconnect to server session
    meta: reset_connection      
  - name: Create a new database with name 'iti'
    community.mysql.mysql_db:
      name: iti
      state: present
      # login_unix_socket: /run/mysqld/mysqld.sock
  - name: Run several insert queries against db test_db in single transaction
    community.mysql.mysql_query:
      login_db: iti
      query:
      # - create table userinfo (fname varchar(15), lname varchar(15), email varchar(30)  , constraint c1 primary key (fname))
      # - create table userinfo (fname varchar(15), lname varchar(15), email varchar(30) )
      - create table userinfo (id int not null auto_increment, firstname varchar(25), lastname varchar(25), age int, email varchar(40) ,constraint c1 primary key (id))

  - name: Reload service httpd
    ansible.builtin.systemd:
      name: httpd.service
      state: restarted